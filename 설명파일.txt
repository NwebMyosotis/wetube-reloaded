
배포: heroku 사용 => node.js 환경에서도 서버가 실행될 수 있게 바꿔야함.
DB 설정도 바꿔야함 (현재는 진짜 DB가 만들어져 있지 않음.) - mongoDB가 localhost에서 실행되는 것은 좋지 않음
서버를 아마존에서 구동되게 해야함(?)
nodemon을 사용해서 babel-node를 실행하고 있는데 babel-node는 실제 서비스 되는 곳이 아니라 개발할 때만 사용되는 목적으로 씀\
바벨 노드는 자바스크립트 코드를 실행할 수 있게 도와줌 그러나 퍼포먼스 무넺가 있음 (바벨노드는 느림)

init.js를 일반적은 js코드로 바꿔줘야함. -> Babel CLI 를 사용
  npm install --save-dev @babel/core @babel/cli

앞서 사용한 babel-node는 실시간으로 백엔드의 코드를 변환해주므로 개발중에 사용하고, 완성이 되었다면 Babel-cli를 사용해 아예 변환된 파일을 바탕으로 백엔드가 동작하도록 해야함 (그래야 더 빠름)

이후 package.json에 babel/cli 를 담당할 scripts를 추가해줘야함.
("build:server": "babel src/init.js -d build")
-d: directory, 빌드한 코드를 어디에 저장할 지를 의미 뒤에 빌드할 위치 적어주기
=> 이때 바벨이라는 폴더가 생성되고 변환된 init.js 가 생성되는데 babel/cli는 init.js 만 변형해서는
 모든 데이터를 받아올 수 없음. 서버가 있는 폴더 자체를 변환해야 함. 즉 경로가 src가 되야함.
 ("build:server": "babel src -d build")

빌드 폴더는 깃허브에 올리고 싶지 않으므로 gitignore에 써놓아도 됨.

-> build 폴더를 살펴보면 src 폴더 자체를 변형했기에 백엔드와 관련없는 client 폴더도 변형된 것을 볼 수 있음,.
 이 부분을 제외해줘야함. (클라이언트는 웹팩이 빌드해야 함) - 나중에

package.json의 scripts에 start 라는 새 명령어 추가.
이 명령어를 사용해서 build의 init.js를 실행해 줄 것임.
"start: "node build/init.js"

이후 npm start 해주면 실행이 되지만 당장은 에러가 발생하 것 (regeneratorRuntime에러)
: 프론트엔드에서 본 에러임. async - await 사용하려고 할 때 생겼던 그 에러. 
=> 왠지 난 문제가 안생김

다시 확인해보면 build 폴더에는 views 폴더가 없다는 걸 확인 가능. 이걸 복사해줘야함. - 나중에

(만약 rpm start시 ES Module 에러가 발생한다면 package.json의 type: module을 삭제해줄 것.)

---

regeneratorRuntime 에러 발생시 원래는 regenerator-runtime을 init.js에 import해 해결 할 수 있음.
(난 문제가 안생기지만 일단 해둠)

- npm run start가 아니어도 됨. start는 기본 명령어이기 때문에 run이 없어도 인식할 수 있음.

원래대로라면 Npm start 후에 localhost::4000 경로로 들어갔을 때 제대로 동작 안하는 것이 맞음. Src views 폴더가 build에는 현재 존재하지 않기 때문.
-> 이게 제대로 동작하는 이유는 build 페이지의 views 경로가 /src/views로 되어있기 때문에 해당 파일들을 인식하기 때문임.
-> 나중에는 이런 client 코드도 빌드하고 손봐야 함.

(Production용으로 만들고 코드를 압축하는 작업도 진행해야 함) - 나중에

---
<프론트엔드 빌드>
 
웹팩은 development와 production 두개의 모드가 있음 (개발중에는 development, 완성후에는 production)
Production의 코드가 훨씬 더 작은편

Build:assets 해야함
"Dev:assets": "webpack --mode=development" -->> 이건 dev:assets에
=> 클라이언트는 웹팩을 사용해 동작함. 이 웹팩의 모드를 설정해줘야함. (--mode=development)
=> 실제 서비스를 위해서 development production으로 실행하기 위해 webpack.config.cjs에 넣는 대신에 명령어로 전달
"build:assets": "webpack --mode=prodcution" --> 이건 build:assets을 만들어서

(webpack.js.org/api/cli/) 로 들어가면 웹팩 명령어들 확인 가능.

: 여기까지 한 후에 build:assets을 해보면 개발중에 사용한 dev:assets으로 출력된 에셋보다 코드가 단축되어 나오는 것을 확인 가능.
: 하지만 여전히 문제가 있는데 webpack.config.cjs에서 watch: true로 해두었기에 webpack은 현재 watch 모드에 있게 됨.
=> 개발모드에서만 watch가 true가 되어야 함.
: 이를 해결하기 위해 webpack.config.cjs에서의 watch:true를 지우고 dev:assets에서만 watch: true가 동작하게 스크립트 명령어를 손봐야 함. (-w 를 추가줘야함)
"Dev:assets": "webpack --mode=development -w"

이후로 build:assets을 한 후 npm start를 하면 production모드로 압축된 에셋을 불러오게 됨.

이러면 완성된 형태의 백엔드와 프론트엔드 코드가 생성되므로 이것을 이후에 herok에 넣어 공유가 가능해짐.

(추가로 스크립트에 "build": "npm run build:server && npm run build:assets" 을 해주면 npm run build로 프론트/백엔드 서버를 구현해줄 수 있게 됨)


==============

Heroku
: 서버를 빠르게 배포할 수 있는 사이트
: 우리가 만든 서버를 헤로쿠에 업로드하면 됨.
: 계정을 만들고 대쉬보드에서 새 앱을 만듬 -> create new app
: 이름은 이미 있는 앱들과 중복이 안되므로 주의

백엔드 업로드하는 방법은 깃허브와 헤로쿠 깃 두가지 있음.

1. 헤로쿠깃으로 업로드
- 먼저 Heroku CLI를 설치해아함. (맥은 터미널 명령어로 설치할 것)
- 설치후 heroku login를 실행해 제대로 설치되었는지 확인

heroku git:remote -a myosotis-wetube

* git push _____ master 라는 명령어는 깃 커밋을 어디에 넣어준다는 의미 ____에 github가 오든 heroku가 오든 하게 됨

: 헤로쿠는 오직 내 커밋 히스토리만 보게 됨. 즉, 커밋을 내보내지 않으면 헤로쿠는 내 코드를 볼 수 없음. 매번 코드가 수정될 때마다 다시 커밋해줘야 한다는 뜻임. (이말은 즉, 커밋되지 않는 .gitignore에 있는 값은 헤로쿠에 업로드 되지 않는다는 말)

heroku logs --tail: 우리에게 서버를 보여주는 명령어 --tail은 실시간으로 로그를 보여주게 됨. (bash 커맨드 공간이 생성될 것)
-> 이걸 한 상태로 다른 커맨드에 git push heroku master 등을 하면 무슨 동작이 이루어지고 있는지 보여주게 됨.

bash로 돌아와 heroku logs --tail로 생성된 로그들을 보면 에러등을 파악가능.
* heroku는 자동으로 npm start를 실행함
- build/init.js를 실행하려다 실패하는데 해당 파일은 build가 끝나고 생기는 폴더이지만 빌드가 제대로 실행되지 않았기 떄문, package.json을 손봐야 함.
- 이건 build 명령이 추가된 package.json을 커밋하지 않았기 때문에 발생한 문제임 (이미 커밋을 해뒀다면 발생하지 않음)

git add.
git commit -m "build script"
git push origin master && git push heroku master -> git에도 업로드하려면 origin을 추가.
(이러면 빌드 과정이 더 오래걸리는 걸 확인 가능 (과정자체가 조금 다름))


다시 bash를 보면 다른 에러도 있을 수 있음
cannot init client 라는 오류가 있다면 클라이언트를 initialize 할 수 없다는 것.
에러가 발생한 원인을 찾기위해 쭉 살펴보면 connect-mongo에서 온 에러임을 확인 가능
mongoUrl이나 clientPromise, client를 줘야한다고 되어있을 거
=> .gitignore에 있는 파일(.env)를 heroku에서는 읽지 못하는데 파일에는 해당 파일의 내용들을 읽어와야 하는 부분이 있기 때문
=> 그렇다고 .env 같은 것들을 커밋하는 방식으로 하면 안됨. 얘들을 바깥에 공개되면 안되는 것이기에

(mongoDB Atlas 계정 만들기) - 몽고DB 데이터베이스를 얻을 수 있음

====

mongo Atlas 계정을 만들었다면 프로젝트를 만들어야 함
로그인했을 때 프로젝트 확인 가능 / 혹은 프로젝트 0이 존재.
new project로 새 프로젝트를 제작, 프로젝트 이름을 정하고 next
이후 클러스터 추가 가능 (create Project)
클러스터: 데이터베이스 그룹 같은 것. 

(전부 free로 설정하기. 아니면 유료가 됨)

aws 선택후 나라 선택, 나머지 선택지가 전부 무료 버전인지 확인한 후 create cluster

클러스터 생성 후 connect 클릭해 Ip 연결 - anywhere를 선택해야 함. (모두가 접속할 수 있게)

이후 데이터베이스 유저 생성 - 기억할 수 있는 username과 password 설정 (패스워드는 autogenerate...를 클릭해 자동 생성가능, 이후 어딘가에 복사해둬야 잊지 않고 사용할 수 있으니 해두기)

위의 과정이 완료되면 다음으로 넘어가 연결해야함. 여기서는 mongoDB의 native driver를 사용해 앱과 연결할 것임. - 설명을 읽어봐야 함.

해당 부분을 클릭해 들어가면 DB_URL로 사용할 수 있는 주소가 나오게 됨. 이 중 <password>를 앞서 생성한 패스워드로 바꾼뒤 복사.


이후 heroku로 돌아가 우리가 만든 앱으로 간 뒤 settings로 들어가면 reveal config value라는 버튼이 있음. 여기에 .env의 key: value 처럼 key - value 형식으로 추가해주면 됨 앞서 DB_URL을 key로 했으므로 이걸 다시 key로 삼고, 뒤에 패스워드를 추가한 클러스터 url을 넣어줌.

(헤로쿠를 사용할 떄는 웹사이트에서 .env 변수를 따로 설정해줘야 함에 유의)(.env는 커밋으로 남으면 안되는데 헤로쿠는 커밋을 읽어들이는 방식이기에 env에 저장된 변수를 불러오지 못하는 것.)


이렇게해도 open app을 해보면 페이지가 로드되지 않음. 서버가 응답이 없는 것. 
그 외에도 secret 옵션 중에서 express-session을 받지 못했다는 메시지가 있는데 이건 server.js의 COOKIE_SECRET을 의미함 이것도 추가해줘야 함.

이렇게 해도 에러들은 남아있는데 Error R10이라는 에러가 있음. 이건 헤로쿠가 우리 서버에서 열어준 PORT와 연결되지 않았다는 의미임.



-==


R10 오류. 
-> 현재 우리ㅐ 포트는 4000 이지만 대부분 헤로쿠는 우리에게 랜덤으로 포트를 제공하기 때문에 헤로쿠가 준 port로 연결해야함.
-> 헤로쿠는 우리에게 PORT 라는 포트 시크릿 변수를 제공한다. 따라서 init.js에서 포트를 4000이 아닌 process.env.PORT로 변경해주어야 한다. (헤로쿠가 아니라면 4000을 주면 됨) process.env.PORT || 4000

이후 다시 git add . 로 깃을 업데이트.
git add .
git commit -m "PORT env variable" (-m은 커밋 메시지를 의미. 커밋에서 무엇이 변경 되었는지 설명하는 것)
git push heroku master

이렇게 새로 커밋한 내용을 바탕으로 헤로쿠를 구성하면 새로운 포트로 연결되고 heroku의 open app을 통해 내 페이지를 열 수 있게 됨.
mongo atalas에는 데이터가 저장되어있지 않으므로 당연히 유저, 비디오, 코멘트 등은 존재하지 않음. 새로 추가하면 내용이 들어올 것.

그러나 문제가 아직 있음.
소셜 로그인을 해도 client_id가 정의되어있지 않고 404를 내보내게 될 것임.
이곳에도 .env로 입력한 데이터들이 있기 때문임. 이 변수들도 heroku를 통해 저장해줘야 함.

관련된 부분들을 모두 heroku에 추가해줘야 함.


===

위 과정을 모두 진행해도 문제가 생기는데 소셜로그인 시 localhost:4000으로 리다이렉트되게 되도록 설정되어있기 때문임.
우리가 깃허브에게 4000 포트로 돌아가라고 했기 때문임.

소셜로그인에서 사용한 사이트에서 callback url을 수정해줘야함 (깃허브 로그인 기준)
-> OAuth application setting에서 Authorizaton callback url을 수정해줄 것.
-> 로컬호스트 대신에 open apps을 했을 때 나오는 기본 주소를 입력해주면 됨.

이 과정에서 웹에 새로운 내용을 업데이트 할 때마다 4000으로 바꿔서 수정 후, 다시 연결하는 귀찮은 과정을 거쳐야 하는데 이걸 해결하기 위해서 OAuth Apps을 두 개 만들어 놓고 사용하기도 함. (즉, 헤로쿠에서 제공한 포트를 사용할 앱과, localhost:4000을 사용할 앱을 따로 만들라는 이야기임)

** 깃허브 이미지는 CORP 에러가 날 수 있음. 만약 elements에 링크가 제대로 들어왔음에도 이미지가 깨진다면 뒤에 crossorigin을 붙여볼 것. 


===

Heroku CLI가 아니라 GitHub로 배포하는 법.

heroku에서 deploy로 들어간 뒤 deployment method를 github로 설정.
이후 계정 연결 후 들어가서 우리가 만든 레포지토리 이름(wetube-reloaded)을 검색한 뒤 찾아서 연결함.
이젠 우리가 git push origin mater 할 때마다 바로 배포할 것임. (automatic deployment)
-> 이러면 git push heroku mater가 아니라 git push origin mater하면 됨.
-> git push origin master를 하면 자동으로 배포가 진행되므로 완성된 상태에서만 주의해서 해줘야 함. 할 때마다 새로 빌드할테니.
-> 이 말은 매번 heroku가 매번 내 서버를 다시 만들기에 비디오가 유지되지 않을 거라는 의미임.

* if loggedInUser.avatarUrl.includes("github")
=> 깃허브 로그인에서만 작동하는 if문 만들기. (avatarUrl에 github라는 글자가 포함되어야 실행된다는 의미)


===


원래대로라면 앞에서 이야기한 것 처럼 커밋을 저장하고 다시 서버를 배포하면 업로드 된 비디오가 깨지는 것을 볼 수 있음.
(강의에서는 깨짐. 여기서는 안 깨지지만 깨진다 가정하고 진행)

이처럼 파일을 저장할 때, 파일을 heroku 서버에 저장하는 것이 아니라 다른 곳 (aws등)에 저장하는 것이 좋음.

aws.amazon.com에서 계정 만들고 s3로 이동(service - storage -s3)

create bucket -> 버킷 이름은 aws에서 유일한 이름이어야함 (겹치지 않는 걸로 만들기)

지역을 설정하고, 모든 public 접근을 막도록 설정한 뒤 create.

이후 api 키를 만들어야 함 노드js와 통신할 수 있도록.

IAM 서비스 사용 (검색창에 치면 나옴)
-> api key를 만들게 해줌

IAM resource에서 usersㅋ;ㅡㄹ릭 후 add users
- 유저 이름 작성 (기억할 수 있는 한 길게?)
- access type에 programmatic access 클릭. programmatic access key를 얻을 것임.
  -> 이걸 하기 싫으면 웹 사이트에 로그인할 때 비밀번호를 적어줘야 함.
  -> programmatic access는 로그인할 때 액세스 키를 사용(key ID, secret key) 이를 활용해 노드js가 로그인.
- 이후 next permission을 클릭하면 모든 권한을 줄 수 있음.
  -> AdministaratorAcess는 관리자 권한을 주는 것이기에 이건 주지 않기.
  -> s3를 검색하면 s3에서 할 수 있는 모든 권한을 줄 수 있음. (파일에 대해서만) - AmazonS3FullAccess
  -> amazones3fullaccess에 체크하면 사람들이 내 계정으로 이것만 할 수 있게 됨.
- next:tag 로 넘어가면 태그를 붙일 수 있음. 안해도 됨.
- next: review로 넘어가면 현재 설정한 내용들 확인 가능. 이후 create user 하면 됨.

여기까지 하면 access key id와 secret access key 확인 가능.
(주의: 이 key 들은 여기서 한번만 볼 수 있음. 바로 복사해둬야 함)

.env에 저장하기
AWS_ID=_____________
AWS_SECRET=____________

(
AWS_ID = AKIAQPOXPJR2LZEEPI4C
AWS_SECRET = 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
)

여기는 백업용도로 보면 되고 이후 heroku로 돌아가 변수를 저장해주면 됨.

버킷을 갖게 되었다면 Multer S3 패키지를 사용해야함.
: multer를 사용할 수 있게 해줌.
npm install --save multer-s3

https://www.npmjs.com/package/multer-s3

middleware에서 아바타와 비디오를 업로드할 때 storage 부분을 추가해야함.
-> avatarUpload와 videoUpload에 storage 추가후 multerUploader 를 value로 넣어주기 (아래에서 저런 이름의 변수 만들거임)
(변수명은 꼭 같을 필요는 없음)
(당연히 파일에 multers3는 import해야함)

위 링크의 사용법을 보다보면 s3가 있는데 이건 aws-sdk 패키지로부터 만든 변수임.
따라서 Npm i aws-sdk로 패키지를 설치할 필요가 있음.

s3 변수는 만들어줘야 함.

new aws.S3({
	credentials: {
		accessKeyId: process.env.AWS_ID,
		secretAccessKey: process.env.AWS_SECRET,
	}
})


const multerUploader = multerS3({
	s3: s3,
	bucket: `내가 만든 버킷 이름,
})


이러고 localhost로 테스트 해보면 에러가 발생할 거.
아바타 데이터가 사라져버렸기 때문임.

우선은 s3 management console로 이동할 것 (aws때 열어둔 페이지에서)
-> 여기는 우리가 한 이미지가 들어와있음. 이미지가 공개되지는 않았지만 제대로 들어오기는 했다는 것.


===


해결할 문제

1. 우리 object가 공개되어있지 않음.
s3 management conosle에서 permissions로 간 뒤 모든 공개권한을 막아놓은 것을 수정해야 함. (권한)
(마지막 두 개만 해제할 것)

2. Access control list(ACL)을 전달해야 함.
acl은 object의 권한임. => public-read로 전달해야함 (acl: 'public-read') : 누구나 우리 파일을 읽을 수 있게함.

-> 그러나 매번 저장할 때마다 avatarUrl은 null이 될 것임.
 userController에서 file은 있는데 file.path가 없기 때문임.
 위 방식을 진행할 경우 더이상 file은 file.path로 경로를 표시하지 않음. file.location으로 표시하게 됨.
path를 사용하는 부분을 file.path를 file.location으로 바꿔주기

이후 aws로 로드될 때는 앞에 / 가 필요 없으므로 url에서 이것들을 없애줘야함. 비디오와 유저 등등에서 다 지워주기.


(추가)
[AccessControlListNotSupported: The bucket does not allow ACLs 오류 해결]

위와 같은 오류가 뜨시는 분들은 버킷에 ACL권한을 변경해주시면 됩니다.

권한 -> 객체 소유권 편집 -> ACL 비활성화됨(권장)을 ACL 활성화됨로 변경 ->
ACL이 복원된다는 것을 확인합니다. 체크 -> 버킷 소유자 선호 체크 -> 변경사항 저장
위의 방법까지 해보시고, 그래도 안 되시는 분들은 ACL(액세스 제어 목록)에서 편집->모든 사람(퍼블릭 액세스)에 나열, 읽기 체크해주신 후 변경사항 저장해서 테스트해보시면 될 거 같습니다.

[No 'Access-Control-Allow-Origin' header is present on the requested resource. 오류 해결]

위와 같은 오류가 콘솔창에 뜨시는 분들은 권한 -> CORS(Cross-origin 리소스 공유) 편집 -> 아래 코드를 추가해주시고 변경사항 저장하시면 됩니다.
https://stackoverflow.com/questions/17533888/s3-access-control-allow-origin-header

```
[
{
"AllowedHeaders": [
"*"
],
"AllowedMethods": [
"GET",
"HEAD"
],
"AllowedOrigins": [
"*"
],
"ExposeHeaders": [],
"MaxAgeSeconds": 3000
}
]
```
+ 추가적으로 이미지 태그와 비디오 태그에 crossorigin속성을 추가해주시면 됩니다.
img(src=`이미지 주소` crossorigin)
video(src=`비디오 주소` crossorigin)

CORS 구성
Cross-Origin 요청을 허용하도록 버킷을 구성하려면 CORS 구성을 생성합니다.
https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/ManageCorsUsing.html

AllowedOrigins을 설정하는 이유
허용하지 않은 origin에서 리소스에 접근 및 사용을 막기 위해서이다.
다시 말해, 허용하지 않은 클라이언트에게 리소스를 주지 않기 위함이고, 허용할 대상에 대한 설정이 AllowedOrigins이다.


=

